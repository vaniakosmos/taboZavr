(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
const theme_1 = require("./theme");
const ui_1 = require("./ui");
const search_1 = require("./search");
const tabs_1 = require("./tabs");
const utils_1 = require("./utils");
const logger = new utils_1.Logger('app');
logger.log('inside');
theme_1.default.load().then(function (theme) {
    logger.log(theme);
    // applyTheme(theme)
});
ui_1.setUpNavUrls();
search_1.setUpSearch({
    def: 'google',
    engines: [{
        name: 'google',
        url: 'http://google.com/search?q='
    }, {
        name: 'images',
        url: 'https://www.google.com/images?q='
    }, {
        name: 'trakt',
        url: 'http://trakt.tv/search?q='
    }],
    labelIsUrl: false
});
tabs_1.setUpTabs({
    def: 'fav',
    grid: {
        cols: 5,
        rows: 5
    },
    entities: [{
        name: 'Fav',
        src: 'bookmark:Bookmarks Bar'
    }, {
        name: 'Top',
        src: 'top'
    }, {
        name: 'Recent',
        src: 'recent'
    }, {
        name: 'ner',
        src: 'bookmark:Other Bookmarks/ner'
    }]
});

},{"./search":2,"./tabs":3,"./theme":4,"./ui":5,"./utils":6}],2:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
function setUpEngines(engines, def) {
    const $enginesForm = $('#engines');
    const $source = $("#engine-template").html();
    const engineTemplate = Handlebars.compile($source);
    const $engines = [];
    engines.forEach(function (engine) {
        const $engine = $(engineTemplate({
            name: engine.name,
            url: engine.url,
            checked: engine.name === def
        }));
        $engines.push($engine.find('input'));
        $enginesForm.append($engine);
    });
    return $engines;
}
function setUpSearch(searchOptions) {
    const $searchInput = $('#search');
    const $searchButton = $('#search-btn');
    const engines = searchOptions.engines;
    const $engineInputs = setUpEngines(engines, searchOptions.def);
    function doSearch(url = 'http://google.com/search?q=') {
        let query = $searchInput.val();
        for (let $engineInput of $engineInputs) {
            if ($engineInput.prop('checked')) {
                url = $engineInput.attr('data-url');
                break;
            }
        }
        if (query) {
            const destUrl = url + encodeURIComponent(query);
            chrome.tabs.getCurrent(function (tab) {
                chrome.tabs.update(tab.id, {
                    url: destUrl
                });
            });
        }
    }
    $engineInputs.forEach(function ($engineInput) {
        $engineInput.click(function () {
            $searchInput.focus();
            if (searchOptions.labelIsUrl) doSearch($engineInput.attr('data-url'));
        });
    });
    $searchInput.on('keypress', e => {
        if (e.keyCode === 13) {
            e.preventDefault();
            doSearch();
        }
    });
    $searchButton.click(() => {
        doSearch();
    });
}
exports.setUpSearch = setUpSearch;

},{}],3:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
const utils_1 = require("./utils");
const tileTemplate = Handlebars.compile($("#tile-template").html());
const headerTemplate = Handlebars.compile($("#tab-title-template").html());
function setUpTabs(tabs) {
    const $tabs = $('#tabs');
    const $headers = $tabs.find('ul').eq(0);
    const $contents = $tabs.find('ul').eq(1);
    for (let tab of tabs.entities) {
        const header = headerTemplate({
            name: tab.name,
            active: tab.name.toLowerCase() === tabs.def.toLowerCase()
        });
        $headers.append(header);
        const $content = $('<li>');
        $contents.append($content);
        if (tab.src === 'top') {
            setUpTop($content, tabs.grid);
        } else if (tab.src === 'recent') {
            setUpRecent($content, tabs.grid);
        } else {
            setUpBookmarks(tab, $content, tabs.grid);
        }
    }
}
exports.setUpTabs = setUpTabs;
function addTile($content, data) {
    const $tile = $(tileTemplate({
        favicon: `chrome://favicon/size/16@2x/${data.url}`,
        title: data.title,
        url: decodeURIComponent(data.url)
    }));
    if (data.url.startsWith('chrome')) {
        $tile.click(utils_1.openLinkFunc(data.url));
    }
    $content.append($tile);
}
function traverse(tree, path) {
    if (path.length === 0) return tree;
    for (let child of tree.children) {
        if (child.title === path[0]) {
            path = path.slice(1);
            return traverse(child, path);
        }
    }
    return null;
}
function setUpTop($content, { rows, cols }) {
    chrome.topSites.get(function (urls) {
        for (let i = 0; i < urls.length && i < rows * cols; i++) {
            addTile($content, urls[i]);
        }
    });
}
function setUpRecent($content, { rows, cols }) {
    chrome.sessions.getRecentlyClosed(function (sessions) {
        for (let i = 0; i < sessions.length && i < rows * cols; i++) {
            if (sessions[i].tab) addTile($content, sessions[i].tab);
        }
    });
}
function setUpBookmarks(tab, $content, { rows, cols }) {
    if (!tab.src.startsWith('bookmark:')) return;
    const path = tab.src.replace(/^bookmark:/, '').split('/');
    console.log('path', path);
    chrome.bookmarks.getTree(function (tree) {
        const bookmarkTree = tree[0];
        const folder = traverse(bookmarkTree, path);
        if (folder) {
            for (let i = 0; i < folder.children.length && i < rows * cols; i++) {
                const bookmark = folder.children[i];
                if (!bookmark.children) {
                    addTile($content, bookmark);
                }
            }
        }
        console.log('folder', folder);
    });
}

},{"./utils":6}],4:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
const utils_1 = require("./utils");
const logger = new utils_1.Logger('theme');
let theme = {
    isImage: false,
    title: 'New Tab',
    header: {
        value: 'Search',
        size: 60,
        hide: false
    },
    accent: 'rgb(255, 66, 66)',
    background: 'rgb(222, 222, 222)'
};
exports.default = {
    get() {
        return theme;
    },
    remove() {
        return new Promise(resolve => {
            chrome.storage.sync.remove('theme', function () {
                logger.log('removed from storage');
                resolve(theme);
            });
        });
    },
    load() {
        return new Promise(resolve => {
            chrome.storage.sync.get('theme', function (result) {
                if (result.theme) {
                    logger.log('using loaded from storage');
                    theme = result.theme;
                    resolve(theme);
                } else {
                    chrome.storage.sync.set({ 'theme': theme }, function () {
                        logger.log(`using default and save into storage`);
                        resolve(theme);
                    });
                }
            });
        });
    },
    save() {
        return new Promise(resolve => {
            chrome.storage.sync.set({ 'theme': theme }, function () {
                logger.log('saved');
                resolve();
            });
        });
    }
};

},{"./utils":6}],5:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
const utils_1 = require("./utils");
const logger = new utils_1.Logger('ui');
function applyTheme(theme) {
    // title
    document.title = theme.title;
    // header
    const $title = $("#title");
    const header = theme.header;
    if (header.hide) {
        $title.hide();
    } else {
        $title.html(header.value).css('font-size', header.size);
    }
    if (theme.isImage) {
        // image
    } else {
        // background
        $('body').css('background', theme.background);
    }
    // accent
    $('.accent').css('background', theme.accent);
}
exports.applyTheme = applyTheme;
function setUpNavUrls() {
    $('#history').click(utils_1.openLinkFunc('chrome://history/'));
    $('#bookmarks').click(utils_1.openLinkFunc('chrome://bookmarks/'));
    $('#extensions').click(utils_1.openLinkFunc('chrome://extensions/'));
    $('#all-apps').click(utils_1.openLinkFunc('chrome://apps/'));
    setUpAddons();
}
exports.setUpNavUrls = setUpNavUrls;
function setUpAddons() {
    const $source = $("#app-template").html();
    const appTemplate = Handlebars.compile($source);
    chrome.management.getAll(function (addons) {
        const $apps_list = $('#apps');
        for (let addon of addons) {
            if (addon.type.endsWith('_app')) {
                let icon = '';
                if (addon.icons) {
                    icon = addon.icons[addon.icons.length - 1].url;
                }
                const appHtml = appTemplate({
                    name: addon.name,
                    icon: icon
                });
                const $clickableApp = $(appHtml).click(() => chrome.management.launchApp(addon.id));
                $apps_list.append($clickableApp);
            }
        }
    });
}

},{"./utils":6}],6:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
class Logger {
    constructor(name) {
        this.name = name.toUpperCase();
    }
    log(...message) {
        console.log(this.name + ':', ...message);
    }
    error(...message) {
        console.error(this.name + ':', ...message);
    }
}
exports.Logger = Logger;
function openLinkFunc(url) {
    return function (event) {
        if (event.ctrlKey || event.shiftKey || event.metaKey || event.button && event.button === 1) {
            chrome.tabs.create({ url: url, active: false });
        } else {
            chrome.tabs.getCurrent(function (tab) {
                chrome.tabs.update(tab.id, { url: url });
            });
        }
    };
}
exports.openLinkFunc = openLinkFunc;
class Color {
    constructor(r, g, b, a) {
        [this.r, this.g, this.b] = [r, g, b];
        if (a) this.a = a;
    }
    static isBound(n) {
        return n >= 0 && n <= 255;
    }
    valid() {
        const a = this.a || 0;
        const isBoundA = Color.isBound(a);
        return Color.isBound(this.r) && Color.isBound(this.g) && Color.isBound(this.b) && isBoundA;
    }
    toString() {
        // return "rgb(1,1,1)";
        if (this.a) return `rgba(${this.r}, ${this.g}, ${this.b}, ${this.a})`;
        return `rgb(${this.r}, ${this.g}, ${this.b})`;
    }
}
exports.Color = Color;

},{}]},{},[1])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
